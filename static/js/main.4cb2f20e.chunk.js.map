{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firstNote","id","info","notesList","JSON","parse","localStorage","getItem","length","push","textValue","firstType","currentID","IDList","list","res","forEach","item","getIDList","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","React","createRef","onType","bind","assertThisInitialized","displayNote","deleteNote","createNewNote","newButton","current","focus","event","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","target","err","return","setItem","stringify","setState","filter","num","includes","newNote","console","log","react_default","a","createElement","className","style","backgroundColor","App_Button","onClick","children","App_NoteList","App_TextEntry","onChange","reference","Component","Button","_ref","_ref$className","type","TextEntry","_ref2","autoFocus","ref","NoteList","_ref3","map","noteClass","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cb2f20e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nlet firstNote = {id: 0,\n                info: 'Welcome to the note app! Notes will be saved in your browser\\'s local storage. :)' }\n\nlet notesList = JSON.parse(localStorage.getItem('list')) || [];\n  if (!notesList.length){\n    notesList.push(firstNote);\n  }\n  if (notesList.length === 1 && notesList[0].info === ''){\n    notesList = [];\n    notesList.push(firstNote);\n  }\nlet textValue = notesList[0].info;\nlet firstType = true;\nlet currentID = notesList[0].id;\n\nfunction getIDList(list) {\n  let res = [];\n  list.forEach(item => res.push(item.id));\n  return res;\n}\n\nvar IDList = getIDList(notesList);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      notesList,\n      firstType,\n      textValue,\n      IDList,\n      currentID,\n    }\n\n    this.text = React.createRef();\n    this.onType = this.onType.bind(this);\n    this.displayNote = this.displayNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n    this.createNewNote = this.createNewNote.bind(this);\n    this.newButton = this.newButton.bind(this);\n  }\n\n  componentDidMount() {\n    this.text.current.focus();\n  }\n\n  componentDidUpdate(){\n    this.text.current.focus();\n  }\n\n  onType(event) {\n    let list = this.state.notesList;\n    let current = this.state.currentID;\n\n    for (let item of list) {\n      if (item.id === current){\n        item.info = event.target.value;\n      }\n    }\n\n    localStorage.setItem('list', JSON.stringify(list));\n    this.setState({ \n      notesList: list,\n      textValue: event.target.value, \n    });\n  }\n\n  displayNote(item){\n    this.setState({\n      textValue: item.info,\n      currentID: item.id,\n    })\n  }\n\n  newButton(){\n    let list = this.state.notesList;\n    let IDList = this.state.IDList;\n    return this.createNewNote(list, IDList);\n  }\n\n  deleteNote(){\n    let list = this.state.notesList;\n    let IDList = this.state.IDList;\n    let id = this.state.currentID;\n\n    list = list.filter(item => \n      item.id !== id);\n    IDList = IDList.filter(num => num !== id);\n\n    if (!list.length){\n      return this.createNewNote(list, IDList);\n    }\n\n    localStorage.setItem('list', JSON.stringify(list));\n\n    this.setState({\n      IDList: IDList,\n      notesList: list,\n      currentID: list[0].id,\n      textValue: list[0].info,\n    })\n  }\n\n  createNewNote(list, IDList) {\n    let id = list.length;\n    while (IDList.includes(id)) {\n      id++;\n    }\n    let newNote = {\n      id: id,\n      info: '',\n    };\n    IDList.push(id);\n    list.push(newNote);\n\n    localStorage.setItem('list', JSON.stringify(list));\n    this.setState({\n      currentID: id,\n      notesList: list,\n      IDList: IDList,\n      textValue: '',\n    })\n  }\n\n  render() {\n    console.log(this.state.notesList);\n    return (\n      <div className=\"container h-100 d-flex flex-column border-dark\">\n\n        <div className=\"row navbar bg-light navbar-light p-0\">\n\n          <div className=\"col h3 mb-0 align-self-stretch\" style={{ backgroundColor: '#edf7fc'}}>\n            <i className=\"far fa-sticky-note navbar-text\"></i>  Take Notes\n          </div>\n          <div className=\"col-auto py-2 pl-5\" style={{ backgroundColor: '#d5e0e6'}}>\n            <Button onClick={this.newButton}\n              children='New Note' \n              className='btn btn-info mx-3' />\n\n            <Button onClick={this.deleteNote}\n              children='Delete Current Note'\n              className='btn btn-info' />\n          </div>\n        </div>\n\n        <div className=\"row flex-grow-1\">\n          <NoteList onClick={this.displayNote}\n            list={this.state.notesList}\n            current={this.state.currentID} />\n\n          <TextEntry value={this.state.textValue}\n            onChange={this.onType}\n            reference={this.text} />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nconst Button = ({ onClick, className='', children }) => \n  <button type=\"button\"\n    onClick = {onClick}\n    className={className}\n    >\n    {children}\n    </button>\n\nconst TextEntry = ({value, onChange, reference}) => \n  <div className=\"col bignote px-0\">\n    <textarea className='note-input form-control h-100 border-top-0 border-bottom-0 rounded-0'\n      value={value}\n      onChange={onChange}\n      autoFocus={'autofocus'}\n      ref={reference}>\n    </textarea>\n  </div>\n\nconst NoteList = ({list, onClick, current}) =>\n  <div className = 'notes col-4 align-self-stretch flex-grow-1 pl-0'>\n    {list.map(item => {\n\n      let noteClass = item.id === current ? \n        \"note p-1 border border-info shadow bg-white currentnote mb-1\" \n      : \"note p-1 border border-info border-2 bg-white shadow-sm mb-1\";\n\n      return (\n        <div className={noteClass}\n          onClick={() => onClick(item)}>\n          {item.info}\n        </div>\n      )\n    }\n      )}\n  </div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}